// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	models "myproject/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// App provides a mock function with given fields: ctx, appID
func (_m *Repository) App(ctx context.Context, appID int) (models.App, error) {
	ret := _m.Called(ctx, appID)

	if len(ret) == 0 {
		panic("no return value specified for App")
	}

	var r0 models.App
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.App, error)); ok {
		return rf(ctx, appID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.App); ok {
		r0 = rf(ctx, appID)
	} else {
		r0 = ret.Get(0).(models.App)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
